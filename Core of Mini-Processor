#include "spimcore.h"

/*CDA Final Project
Created by Ricardo Garcia */



/* ALU */
/* 10 Points */
void ALU(unsigned A,unsigned B,char ALUControl,unsigned *ALUresult,char *Zero)
{
   switch(ALUControl)
   {
   //Adding
   case 0:
    *ALUresult = A+B;
    break;
    //Subtracting
   case 1:
    *ALUresult = A-B;
    break;
    //Less than
   case 2:
    if ((int)A < (int)B)
        *ALUresult = 1;
    else
        *ALUresult = 0;
    break;
    //Less than unsigned
   case 3:
    if(A < B)
        *ALUresult = 1;
    else
        *ALUresult = 0;
    break;
    //bitwise AND
   case 4:
    *ALUresult = (A & B);
    break;
    //bitwise OR
   case 5:
    *ALUresult = (A | B);
    break;
    //Shift left 16
   case 6:
    *ALUresult = B << 16;
    break;
    //Not A
   case 7:
    *ALUresult = !(A);
    break;

   }
   //Based on results, set zero; 1 if *ALUResult = 0, else, 0
   if (*ALUresult == 0)
   {
       *Zero = 1;
   }
   else {
    *Zero = 0;
   }

}

/* instruction fetch */
/* 10 Points */
int instruction_fetch(unsigned PC,unsigned *Mem,unsigned *instruction)
{
    //returns 1 in case of halt condition, else 0.
    if((PC > 65535) | (PC & 0x3))
    {
        return 1;
    }
    *instruction = Mem[PC >> 2];

    return 0;
}


/* instruction partition */
/* 10 Points */
void instruction_partition(unsigned instruction, unsigned *op, unsigned *r1,unsigned *r2, unsigned *r3, unsigned *funct, unsigned *offset, unsigned *jsec)
{
    // instruction [31-26]
    *op = (instruction >> 26) & 0x0000003F;
    // instruction [25-21]
    *r1 = (instruction >> 21) & 0x0000001F;
    // instruction [20-16]
    *r2 = (instruction >> 16) & 0x0000001F;
    // instruction [15-11]
    *r3 = (instruction >> 11) & 0x0000001F;
    // instruction [5-0]
    *funct = instruction & 0x0000003F;
    // instruction [15-0]
    *offset = instruction & 0x0000FFFF;
    // instruction [25-0]
    *jsec = instruction & 0x03FFFFFF;
}



/* instruction decode */
/* 15 Points */
int instruction_decode(unsigned op,struct_controls *controls)
{
    int haltCode = 0;
    switch(op)
    {
    case 0x00:
        //Register Type:
        controls -> RegDst = 1;
        controls -> Jump = 0;
        controls -> Branch = 0;
        controls -> MemRead = 0;
        controls -> MemtoReg = 0;
        controls -> ALUOp = 7;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 0;
        controls -> RegWrite = 1;
        break;
    case 0x0d:
        //OR immediate:
        controls -> RegDst = 0;
        controls -> Jump = 0;
        controls -> Branch = 0;
        controls -> MemRead = 0;
        controls -> MemtoReg = 0;
        controls -> ALUOp = 5;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 1;
        controls -> RegWrite = 1;
        break;
    case 0x23:
        //Load word:
        controls -> RegDst = 0;
        controls -> Jump = 0;
        controls -> Branch = 0;
        controls -> MemRead = 1;
        controls -> MemtoReg = 1;
        controls -> ALUOp = 0;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 1;
        controls -> RegWrite = 1;
        break;
    case 0x2b:
        //Store word:
        controls -> RegDst = 2;
        controls -> Jump = 0;
        controls -> Branch = 0;
        controls -> MemRead = 0;
        controls -> MemtoReg = 2;
        controls -> ALUOp = 0;
        controls -> MemWrite = 1;
        controls -> ALUSrc = 1;
        controls -> RegWrite = 0;
        break;
    case 0x0a:
        //Make less than immediate
        controls -> RegDst = 0;
        controls -> Jump = 0;
        controls -> Branch = 0;
        controls -> MemRead = 0;
        controls -> MemtoReg = 0;
        controls -> ALUOp = 2;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 1;
        controls -> RegWrite = 1;
        break;
    case 0x04:
        //Branch Eq:
        controls -> RegDst = 2;
        controls -> Jump = 0;
        controls -> Branch = 1;
        controls -> MemRead = 0;
        controls -> MemtoReg = 2;
        controls -> ALUOp = 0;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 1;
        controls -> RegWrite = 0;
        break;
    case 0x01:
        //Branch if equal to or greater than 0:
        controls -> RegDst = 0;
        controls -> Jump = 0;
        controls -> Branch = 1;
        controls -> MemRead = 0;
        controls -> MemtoReg = 0;
        controls -> ALUOp = 6;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 1;
        controls -> RegWrite = 0;
        break;
    case 0x02:
        //Jump:
        controls -> RegDst = 2;
        controls -> Jump = 1;
        controls -> Branch = 2;
        controls -> MemRead = 2;
        controls -> MemtoReg = 2;
        controls -> ALUOp = 0;
        controls -> MemWrite = 0;
        controls -> ALUSrc = 2;
        controls -> RegWrite = 0;
        break;
    default:
        //not handled
        haltCode = 1;
    }
    return haltCode;
}

/* Read Register */
/* 5 Points */
void read_register(unsigned r1,unsigned r2,unsigned *Reg,unsigned *data1,unsigned *data2)
{
    //Places registers 1 & 2 into own arrays and set equal to pointers for ALU stage
    *data1 = Reg[r1];
    *data2 = Reg[r2];

}


/* Sign Extend */
/* 10 Points */
void sign_extend(unsigned offset,unsigned *extended_value)
{
    //offset check
    if(offset & 0x00008000)
    {
        *extended_value = offset | 0xffff0000;
    }
    else
    {
        *extended_value = offset;
    }

}

/* ALU operations */
/* 10 Points */
int ALU_operations(unsigned data1,unsigned data2,unsigned extended_value,unsigned funct,char ALUOp,char ALUSrc,unsigned *ALUresult,char *Zero)
{
    //ALUSrc check
    if(ALUSrc == 0)
    {
        switch (funct)
        {
            //unsigned addition
            case 0x21:
                ALUOp = 0;
                break;
            //unsigned subtraction
            case 0x23:
                ALUOp = 1;
                break;
            //Bitwise &
            case 0x24:
                ALUOp = 4;
                break;
            //Set on less than
            case 0x2a:
                ALUOp = 2;
                break;
            //Set on less than unsigned
            case 0x2b:
                ALUOp = 3;
                break;
            //unknown/invalid
            default:
                return 1;
        }
        ALU(data1,data2, ALUOp, ALUresult, Zero);
    }
    else if(ALUSrc == 1)
    {
        ALU(data1, extended_value, ALUOp, ALUresult, Zero);
    }
    return 0;
}

/* Read / Write Memory */
/* 10 Points */
int rw_memory(unsigned ALUresult,unsigned data2,char MemWrite,char MemRead,unsigned *memdata,unsigned *Mem)
{
    if ((MemWrite == 1 || MemRead == 1) && ALUresult  % 4 !=0)
    {
        //Memory Call
        return 1;
    }
    //If MemWrite = 1, memory of ALUResult is set equal to data2
    if (MemWrite == 1)
    {
        Mem[ALUresult >> 2] = data2;
    }
    //IF MemRead = 1, sets memdata equal to memory of ALUresult shifted 2 bits
    if (MemRead == 1)
    {
        *memdata = Mem[ALUresult >> 2];
    }
    return 0;

}


/* Write Register */
/* 10 Points */
void write_register(unsigned r2,unsigned r3,unsigned memdata,unsigned ALUresult,char RegWrite,char RegDst,char MemtoReg,unsigned *Reg)
{
    if (RegWrite == 1)
    {
        if(MemtoReg == 1)
        {
            if (RegDst == 1)
                Reg[r3] = memdata;
            else Reg[r2] = memdata;
        }
        else
        {
            if (RegDst == 1)
            Reg[r3] = ALUresult;
            else
            Reg[r2] = ALUresult;
        }
    }

}

/* PC update */
/* 10 Points */
void PC_update(unsigned jsec,unsigned extended_value,char Branch,char Jump,char Zero,unsigned *PC)
{
    //PC incremented by 4 after every instruction
    *PC = *PC + 4;
    if(Jump == 1)
    {
        *PC = (jsec << 2) | (*PC | 0xf0000000);
    }
    else if(Branch == 1 && Zero)
    {
        *PC += (extended_value << 2);
    }
}

